generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  images    Image[]
  swaps     Swap[]

  @@map("users")
}

model Image {
  id          String    @id @default(cuid())
  userId      String
  type        ImageType
  url         String
  filename    String?
  fileSize    Int?
  mimeType    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  outfitSwaps Swap[]    @relation("OutfitImage")
  resultSwaps Swap[]    @relation("ResultImage")
  userSwaps   Swap[]    @relation("UserImage")

  @@map("images")
}

model Swap {
  id                    String     @id @default(cuid())
  userId                String
  userImageId           String
  outfitImageId         String
  resultImageId         String?
  status                SwapStatus @default(PENDING)
  error                 String?
  processingStartedAt   DateTime?
  processingCompletedAt DateTime?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  outfitImage           Image      @relation("OutfitImage", fields: [outfitImageId], references: [id])
  resultImage           Image?     @relation("ResultImage", fields: [resultImageId], references: [id])
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userImage             Image      @relation("UserImage", fields: [userImageId], references: [id])

  @@map("swaps")
}

enum ImageType {
  USER
  OUTFIT
  RESULT
}

enum SwapStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
